{
	"info": {
		"_postman_id": "0574ad8a-a525-43ae-8e1e-5fd9756037f4",
		"name": "Conduit",
		"description": "Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
									"tests['User has \"image\" property'] = user.hasOwnProperty('image');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{USERNAME}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
									"tests['User has \"image\" property'] = user.hasOwnProperty('image');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login and Remember Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7674032-bf09-4ae7-8224-4afa2fb1a9f9",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
									"tests['User has \"image\" property'] = user.hasOwnProperty('image');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									"",
									"if(tests['User has \"token\" property']){",
									"    pm.globals.set('token', user.token);",
									"}",
									"",
									"tests['Global variable \"token\" has been set'] = pm.globals.get('token') === user.token;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users/login",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
									"tests['User has \"image\" property'] = user.hasOwnProperty('image');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
									"tests['User has \"image\" property'] = user.hasOwnProperty('image');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/user",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Items",
			"item": [
				{
					"name": "All Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Items by Seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items?seller=johnjacob",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "seller",
									"value": "johnjacob"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Items Favorited by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"    ",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items?favorited=jane",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "favorited",
									"value": "jane"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Items by Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items?tag=dragons",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "tag",
									"value": "dragons"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Items, Favorite, Comments",
			"item": [
				{
					"name": "Create Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e711dbf8-8065-4ba8-8b74-f1639a7d8208",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"item\" property'] = responseJSON.hasOwnProperty('item');",
									"",
									"var item = responseJSON.item || {};",
									"",
									"tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"pm.globals.set('slug', item.slug);",
									"",
									"tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"item\":{\"title\":\"How to train your dragon\", \"description\":\"Ever wonder how?\", \"body\":\"Very carefully.\", \"tagList\":[\"dragons\",\"training\"]}}"
						},
						"url": {
							"raw": "{{APIURL}}/items",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items/feed",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Items with auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Items by Seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items?seller={{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "seller",
									"value": "{{USERNAME}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Items by Seller with auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items?seller={{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "seller",
									"value": "{{USERNAME}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Items Favorited by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"    ",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items?favorited=jane",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "favorited",
									"value": "jane"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Items Favorited by Username with auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"    ",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items?favorited=jane",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "favorited",
									"value": "jane"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Item by slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"item\" property'] = responseJSON.hasOwnProperty('item');",
									"",
									"var item = responseJSON.item || {};",
									"",
									"tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items/{{slug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items",
								"{{slug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Items by Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"items\" property'] = responseJSON.hasOwnProperty('items');",
									"    tests['Response contains \"itemsCount\" property'] = responseJSON.hasOwnProperty('itemsCount');",
									"    tests['itemsCount is an integer'] = Number.isInteger(responseJSON.itemsCount);",
									"",
									"    if(responseJSON.items.length){",
									"        var item = responseJSON.items[0];",
									"",
									"        tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"        tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"        tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"        tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"        tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"        tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"        tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"        tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"        tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"        tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"        tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"        tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"        tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"    } else {",
									"        tests['itemsCount is 0 when feed is empty'] = responseJSON.itemsCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items?tag=dragons",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "tag",
									"value": "dragons"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"item\" property'] = responseJSON.hasOwnProperty('item');",
									"",
									"var item = responseJSON.item || {};",
									"",
									"tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"item\":{\"body\":\"With two hands\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/items/{{slug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items",
								"{{slug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Favorite Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"item\" property'] = responseJSON.hasOwnProperty('item');",
									"",
									"var item = responseJSON.item || {};",
									"",
									"tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"tests[\"Item's 'favorited' property is true\"] = item.favorited === true;",
									"tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"tests[\"Item's 'favoritesCount' property is greater than 0\"] = item.favoritesCount > 0;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items/{{slug}}/favorite",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items",
								"{{slug}}",
								"favorite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfavorite Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"item\" property'] = responseJSON.hasOwnProperty('item');",
									"",
									"var item = responseJSON.item || {};",
									"",
									"tests['Item has \"title\" property'] = item.hasOwnProperty('title');",
									"tests['Item has \"slug\" property'] = item.hasOwnProperty('slug');",
									"tests['Item has \"body\" property'] = item.hasOwnProperty('body');",
									"tests['Item has \"createdAt\" property'] = item.hasOwnProperty('createdAt');",
									"tests['Item\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.createdAt);",
									"tests['Item has \"updatedAt\" property'] = item.hasOwnProperty('updatedAt');",
									"tests['Item\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(item.updatedAt);",
									"tests['Item has \"description\" property'] = item.hasOwnProperty('description');",
									"tests['Item has \"tagList\" property'] = item.hasOwnProperty('tagList');",
									"tests['Item\\'s \"tagList\" property is an Array'] = Array.isArray(item.tagList);",
									"tests['Item has \"seller\" property'] = item.hasOwnProperty('seller');",
									"tests['Item has \"favorited\" property'] = item.hasOwnProperty('favorited');",
									"tests['Item has \"favoritesCount\" property'] = item.hasOwnProperty('favoritesCount');",
									"tests['favoritesCount is an integer'] = Number.isInteger(item.favoritesCount);",
									"tests[\"Item's \\\"favorited\\\" property is false\"] = item.favorited === false;",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items/{{slug}}/favorite",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items",
								"{{slug}}",
								"favorite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment for Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f90c364-cc68-4728-961a-85eb00197d7b",
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"comment\" property'] = responseJSON.hasOwnProperty('comment');",
									"",
									"var comment = responseJSON.comment || {};",
									"",
									"tests['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
									"pm.globals.set('commentId', comment.id);",
									"",
									"tests['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
									"tests['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
									"tests['\"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.createdAt);",
									"tests['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
									"tests['\"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.updatedAt);",
									"tests['Comment has \"seller\" property'] = comment.hasOwnProperty('seller');",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"comment\":{\"body\":\"Thank you so much!\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/items/{{slug}}/comments",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items",
								"{{slug}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Comments for Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"comments\" property'] = responseJSON.hasOwnProperty('comments');",
									"",
									"    if(responseJSON.comments.length){",
									"        var comment = responseJSON.comments[0];",
									"",
									"        tests['Comment has \"id\" property'] = comment.hasOwnProperty('id');",
									"        tests['Comment has \"body\" property'] = comment.hasOwnProperty('body');",
									"        tests['Comment has \"createdAt\" property'] = comment.hasOwnProperty('createdAt');",
									"        tests['\"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.createdAt);",
									"        tests['Comment has \"updatedAt\" property'] = comment.hasOwnProperty('updatedAt');",
									"        tests['\"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(comment.updatedAt);",
									"        tests['Comment has \"seller\" property'] = comment.hasOwnProperty('seller');",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items/{{slug}}/comments",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items",
								"{{slug}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment for Item",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items/{{slug}}/comments/{{commentId}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items",
								"{{slug}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/items/{{slug}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"items",
								"{{slug}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "67853a4a-e972-4573-a295-dad12a46a9d7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3057f989-15e4-484e-b8fa-a041043d0ac0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Register Celeb",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
									"tests['User has \"image\" property'] = user.hasOwnProperty('image');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"celeb_{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"celeb_{{USERNAME}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/users",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
									"    ",
									"    var profile = responseJSON.profile || {};",
									"    ",
									"    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
									"    tests['Profile has \"bio\" property'] = profile.hasOwnProperty('bio');",
									"    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
									"    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
									"}",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
									"    ",
									"    var profile = responseJSON.profile || {};",
									"    ",
									"    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
									"    tests['Profile has \"bio\" property'] = profile.hasOwnProperty('bio');",
									"    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
									"    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
									"    tests['Profile\\'s \"following\" property is true'] = profile.following === true;",
									"}",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"{{EMAIL}}\"}}"
						},
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
									"    ",
									"    var profile = responseJSON.profile || {};",
									"    ",
									"    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
									"    tests['Profile has \"bio\" property'] = profile.hasOwnProperty('bio');",
									"    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
									"    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
									"    tests['Profile\\'s \"following\" property is false'] = profile.following === false;",
									"}",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"profiles",
								"celeb_{{USERNAME}}",
								"follow"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "All Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"    ",
									"    tests['Response contains \"tags\" property'] = responseJSON.hasOwnProperty('tags');",
									"    tests['\"tags\" property returned as array'] = Array.isArray(responseJSON.tags);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{APIURL}}/tags",
							"host": [
								"{{APIURL}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}